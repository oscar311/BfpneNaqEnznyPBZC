
AVRASM ver. 2.2.6  C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm Thu Jun 01 16:38:31 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(77): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(78): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/macros.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(79): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/lcd.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(80): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/timer0.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(81): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/keypad.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(292): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/AdminScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(293): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/CoinReturn.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(294): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/CoinScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(295): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/DeliverScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/DeliverScreen.asm(6): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(296): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/EmptyScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(297): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/SelectScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(298): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/StartScreen.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(77): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(78): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/macros.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(79): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/lcd.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(80): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/timer0.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(81): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/keypad.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(292): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/AdminScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(293): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/CoinReturn.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(294): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/CoinScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(295): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/DeliverScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/DeliverScreen.asm(6): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(296): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/EmptyScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(297): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/SelectScreen.asm'
C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\main.asm(298): Including file 'C:\Users\Ramal\Uni Work\COMP2121\Project\AssemblerApplication1\AssemblerApplication1\modules/StartScreen.asm'
                                 
                                 .equ inStart =  1
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .equ inSelect = 2
                                 .equ inCoin = 3
                                 .equ inEmpty = 4
                                 .equ ADCCoin = 6
                                 .equ inReturn = 5
                                 .equ inDeliver = 7
                                 .equ inAdmin = 8
                                 
                                 .equ aKey = 20
                                 .equ bKey = 21
                                 .equ cKey = 22
                                 .equ dKey = 23
                                 .equ asterix = 24
                                 .equ hash = 25
                                 .equ zeroButton = 26
                                 
                                 .equ turnLEDOff = 0b11010000
                                 .equ turnLEDOn =  0b00101111
                                 .equ turnMotOn = 0b11010000
                                 
                                 .def currFlag = r4
                                 .def oldFlag = r5
                                 .def keyPress = r6
                                 .def keyID = r7
                                 .def potPos = r8
                                 .def coinsToReturn = r9 
                                 .def coinsEntered = r10	
                                 .def coinsRequired = r11
                                 .def keyDebounce = r12
                                 .def currItem = r13
                                 
                                 .def row = r16
                                 .def col = r17
                                 .def rmask = r18                ; mask for row
                                 .def cmask = r19                ; mask for column
                                 .def temp = r20
                                 .def temp1 = r21
                                 .def ADCLow = r22
                                 .def ADCHigh = r23
                                 
                                 								;we have up to and including r25
                                 
                                 .dseg 
                                 LEDCounter:
000200                               .byte 2             ; Temporary counter. Counts milliseconds
                                 DisplayCounter:
000202                               .byte 2             ; counts number of milliseconds for displays.
                                 ReturnCounter:
000204                           	.byte 2
                                 KeyCounter:
000206                           	.byte 2
                                 ADCCounter:
000208                           	.byte 2
                                 Inventory:
00020a                           	.byte 9
                                 Cost:
000213                           	.byte 9	
                                 
                                 
                                 .cseg
                                 .org 0x0000
000000 940c 01ba                    jmp RESET
                                 .org INT0addr
000002 940c 0835                 	jmp EXT_INT0		
                                 .org INT1addr
000004 940c 083f                    jmp EXT_INT1
                                 .org OVF0addr
00002e 940c 0093                    jmp Timer0OVF        ; Jump to the interrupt handler for timer 0
                                 .org ADCCaddr
00003a 940c 082a                 	jmp EXT_POT
                                 
                                 
00003c 940c 003e                 jmp DEFAULT          ; default service for all other interrupts.
00003e 9518                      DEFAULT:  reti          ; no service
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .include "modules/macros.asm"
                                 
                                 ; the parameter @0 is the memory address for that word
                                 .macro clear
                                     ldi YL, low(@0)     ; load the memory address to Y
                                     ldi YH, high(@0)
                                     clr temp 
                                     st Y+, temp         ; clear the two bytes at @0 in SRAM
                                     st Y, temp
                                 .endmacro
                                 
                                 
                                 .macro do_lcd_command
                                     push r16
                                     ldi r16, @0
                                     rcall lcd_command
                                     rcall lcd_wait
                                     pop r16
                                 .endmacro
                                 
                                 /*
                                 Usage:
                                     ldi r24, 4
                                     ldi temp1, 2
                                     set_element r24,Inventory, temp1
                                     ldi r24, 6
                                     ldi temp1, 9
                                     set_element r24,Inventory, temp1
                                     clr temp1
                                     ldi r24, 4
                                     get_element r24,Inventory, temp1
                                     ldi r24, 6
                                     get_element r24,Inventory, temp1
                                 */
                                 
                                 /*
                                     @0 - register containing desired index (not temp!)
                                     @1 - address of array to read from
                                     @2 - register to write value to
                                 */
                                 .macro get_element
                                     push XL
                                     push XH
                                     push @0
                                     push temp
                                     in temp, SREG
                                     push temp   
                                     
                                     ldi XL, low(@1)
                                     ldi XH, high(@1)
                                 
                                     loop:
                                     cpi @0, 1
                                     breq getVal
                                     subi @0, 1
                                     adiw XH:XL, 1
                                     jmp loop
                                     
                                     getVal:
                                     clr @2
                                     ld @2, X
                                     
                                     pop temp
                                     out SREG, temp
                                     pop temp
                                     pop @0
                                     pop XH
                                     pop XL
                                 .endmacro
                                 
                                 /*
                                     @0 - register containing desired index (not temp!)
                                     @1 - address of array to write to
                                     @2 - register to write value from
                                 */
                                 .macro set_element
                                     push XL
                                     push XH
                                     push @0
                                     push temp
                                     in temp, SREG
                                     push temp
                                     
                                     ldi XL, low(@1)
                                     ldi XH, high(@1)
                                 
                                     loop:
                                     cpi @0, 1
                                     breq setVal
                                     subi @0, 1
                                     adiw XH:XL, 1
                                     jmp loop
                                     
                                     setVal:
                                     st X, @2
                                 
                                     pop temp
                                     out SREG, temp
                                     pop temp
                                     pop @0
                                     pop XH
                                     pop XL
                                 .endmacro
                                 
                                 .macro set_reg
                                     push temp
                                     ldi temp, @1
                                     mov @0, temp
                                     pop temp
                                 .endmacro
                                 
                                 .macro clr_reg
                                     push temp
                                     clr temp
                                     mov @0, temp
                                     pop temp
                                 .endmacro
                                 
                                 .macro do_lcd_data
                                     push r16
                                     mov r16, @0
                                     subi r16, -'0'
                                     rcall lcd_data
                                     rcall lcd_wait
                                     pop r16
                                 .endmacro
                                 
                                 .macro do_lcd_data_i
                                 	push r16
                                 	ldi r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 	pop r16
                                 .endmacro
                                 
                                 .macro lcd_set
                                     sbi PORTA, @0           //set a bit (specified by @0) in portA
                                 .endmacro
                                 
                                 .macro lcd_clr
                                     cbi PORTA, @0           //clear a bit (specified by @0) in portA
                                 .endmacro
                                 
                                 .macro check_coins_zero
                                     push r16
                                     ldi r16, 0               
                                     cp coinsToReturn, r16
                                     pop r16
                                 .endmacro
                                 
                                 
                                 
                                     
                                 
                                 .include "modules/lcd.asm"
                                 
                                 
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 lcd_command:
00003f bb01                          out PORTF, r16          //write out a control command to LCD
000040 d01f                          rcall sleep_1ms
000041 9a16                          lcd_set LCD_E
000042 d01d                          rcall sleep_1ms
000043 9816                          lcd_clr LCD_E
000044 d01b                          rcall sleep_1ms
000045 9508                          ret
                                 
                                 lcd_data:
000046 bb01                          out PORTF, r16          // write out data to LCD
000047 9a17                          lcd_set LCD_RS
000048 d017                          rcall sleep_1ms
000049 9a16                          lcd_set LCD_E
00004a d015                          rcall sleep_1ms
00004b 9816                          lcd_clr LCD_E
00004c d013                          rcall sleep_1ms
00004d 9817                          lcd_clr LCD_RS
00004e 9508                          ret
                                 
                                 lcd_wait:
00004f 930f                          push r16
000050 2700                          clr r16
000051 bb00                          out DDRF, r16               // set port F as input
000052 bb01                          out PORTF, r16
000053 9a15                          lcd_set LCD_RW
                                         
                                 lcd_wait_loop:
000054 d00b                          rcall sleep_1ms
000055 9a16                          lcd_set LCD_E
000056 d009                          rcall sleep_1ms
000057 b10f                          in r16, PINF
000058 9816                          lcd_clr LCD_E
000059 fd07                          sbrc r16, 7                 // check if busy flag has been cleared
00005a cff9                          rjmp lcd_wait_loop          //if its still busy then it waits longer
00005b 9815                          lcd_clr LCD_RW
00005c ef0f                          ser r16
00005d bb00                          out DDRF, r16               // Port F to output
00005e 910f                          pop r16
00005f 9508                          ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
000060 938f                          push r24
000061 939f                          push r25
000062 e09f                          ldi r25, high(DELAY_1MS)
000063 e98c                          ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
000064 9701                          sbiw r25:r24, 1
000065 f7f1                          brne delayloop_1ms
000066 919f                          pop r25
000067 918f                          pop r24
000068 9508                          ret
                                 
                                 sleep_5ms:
000069 dff6                          rcall sleep_1ms
00006a dff5                          rcall sleep_1ms
00006b dff4                          rcall sleep_1ms
00006c dff3                          rcall sleep_1ms
00006d dff2                          rcall sleep_1ms
00006e 9508                          ret
                                 
                                 /*
                                 */
                                 print_digits:
00006f 934f                          push temp
000070 b74f                          in temp, SREG
000071 934f                          push temp
000072 935f                          push temp1
000073 930f                          push r16
000074 2755                          clr temp1
                                 
                                     tens:                       ; likewise for tens and ones....
000075 e04a                          ldi temp, 10
000076 300a                          cpi  r16, 10
000077 f020                          brlo tens_print
000078 1b04                          sub  r16, temp
000079 9553                          inc temp1
00007a 940c 0075                     jmp tens
                                 
                                     tens_print:
00007c d00e                          rcall print
                                 
                                     ones:
00007d e041                          ldi temp, 1
00007e 1704                          cp  r16, temp
00007f f020                          brlo ones_print
000080 1b04                          sub  r16, temp
000081 9553                          inc temp1
000082 940c 007d                     jmp ones
                                 
                                     ones_print:
000084 d006                          rcall print
                                 
000085 910f                          pop r16
000086 915f                          pop temp1
000087 914f                          pop temp
000088 bf4f                          out SREG, temp
000089 914f                          pop temp
00008a 9508                          ret
                                 
                                 print:
00008b 930f
00008c 2f05
00008d 5d00
00008e dfb7
00008f dfbf
000090 910f                          do_lcd_data temp1          ;prints number in temp1
000091 2755                          clr temp1
                                 .include "modules/timer0.asm"
000092 9508                      
                                                             ; number of interrupts per second = (1E-3) / (127.5)E-6 = 7.843 ~ 8
                                 
                                 Timer0OVF: ; interrupt subroutine to Timer0
000093 934f                          push temp
000094 b74f                          in temp, SREG
000095 934f                          push temp                               ; Prologue starts.
000096 935f                          push temp1
000097 93df                          push YH                                 ; Save all conflict registers in the prologue.
000098 93cf                          push YL
000099 938f                          push r24
00009a 939f                          push r25
00009b 93af                          push r26
00009c 93bf                          push r27
                                 
                                    
                                     ; enabling the ADC every cycle to get value       
00009d 2d54                              mov temp1, currFlag
00009e 3056                              cpi temp1, ADCCoin
00009f f4c1                              brne skipADC                        ; dont enable ADC if not in coin screen
                                 
0000a0 91a0 0208                         lds r26, ADCCounter
0000a2 91b0 0209                         lds r27, ADCCounter+1
0000a4 9611                              adiw r27:r26, 1
                                 
0000a5 39a0                              cpi r26, low(50*INTS_PER_MS)        ; 3 second check
0000a6 e041                              ldi temp, high(50*INTS_PER_MS) 
0000a7 07b4                              cpc r27, temp
0000a8 f459                              brne finishADC
                                            
0000a9 9140 007a                         lds temp, ADCSRA
0000ab 6440                              ori temp, (1 << ADSC)               
0000ac 9340 007a                         sts ADCSRA, temp                    ; enabling the ADC reader which will interrupt when conversion done
0000ae e0c8
0000af e0d2
0000b0 2744
0000b1 9349
0000b2 8348                              clear ADCCounter
0000b3 c004                              rjmp skipADC
                                 
                                         finishADC:
0000b4 93a0 0208                         sts ADCCounter, r26
0000b6 93b0 0209                         sts ADCCounter +1, r27
                                         
                                         skipADC:
                                 
                                 
                                 
                                     ; debouncing the keypad
0000b8 ef5f                              ser temp1
0000b9 16c5                              cp keyDebounce, temp1
0000ba f4a1                              brne finishKDebounce                  ; no debouncing needed
                                 
0000bb 91a0 0206                         lds r26, KeyCounter
0000bd 91b0 0207                         lds r27, KeyCounter+1
0000bf 9611                              adiw r27:r26, 1
                                         
                                 
0000c0 34a0                              cpi r26, low(5000*INTS_PER_MS)        ; 250 millisecond check
0000c1 e94c                              ldi temp, high(5000*INTS_PER_MS) 
0000c2 07b4                              cpc r27, temp
0000c3 f439                              brne skipKey
                                 
0000c4 24cc                              clr keyDebounce
0000c5 e0c6
0000c6 e0d2
0000c7 2744
0000c8 9349
0000c9 8348                              clear KeyCounter
0000ca c004                              rjmp finishKDebounce
                                 
                                         skipKey:
0000cb 93a0 0206                         sts KeyCounter, r26
0000cd 93b0 0207                         sts KeyCounter +1, r27
                                 
                                         finishKDebounce:
                                 
                                     ; checking every 3 seconds for display updates
0000cf 91a0 0202                         lds r26, DisplayCounter
0000d1 91b0 0203                         lds r27, DisplayCounter+1
0000d3 9611                              adiw r27:r26, 1
                                         
                                 
0000d4 3ca0                              cpi r26, low(3000*INTS_PER_MS)        ; 3 second check
0000d5 e54d                              ldi temp, high(3000*INTS_PER_MS) 
0000d6 07b4                              cpc r27, temp
0000d7 f449                              brne skipDisplay
                                         
0000d8 d171                              rcall start_to_select                   ; if the start screen needs to be changed
0000d9 d17f                              rcall empty_to_select                   ; if the empty screen needs to be changed
0000da d19f                              rcall deliver_to_select                 ; go from deliver screen to select screen (if t=3 mot off)
                                  
0000db e0c2
0000dc e0d2
0000dd 2744
0000de 9349
0000df 8348                              clear DisplayCounter 
0000e0 c04e                              rjmp EndIF
                                 
                                         skipDisplay:
                                 
0000e1 93a0 0202                         sts DisplayCounter, r26
0000e3 93b0 0203                         sts DisplayCounter +1, r27
                                 
                                 
                                     ;counting 1.5 seconds  to turn off the 10 LEDs
0000e5 91a0 0200                         lds r26, LEDCounter
0000e7 91b0 0201                         lds r27, LEDCounter+1
0000e9 9611                              adiw r27:r26, 1
                                         
0000ea e044                              ldi temp, inEmpty
0000eb 1644                              cp currFlag, temp
0000ec f019                              breq flash
                                 
0000ed e047                              ldi temp, inDeliver
0000ee 1644                              cp currFlag, temp
0000ef f491                              brne skipLED                          ; if not in EmptyScreen then no need to consider this
                                 
                                         flash:
0000f0 3ea0                              cpi r26, low(1500*INTS_PER_MS)        ; 1.5 second check
0000f1 e24e                              ldi temp, high(1500*INTS_PER_MS) 
0000f2 07b4                              cpc r27, temp
0000f3 f471                              brne skipLED
                                         
0000f4 e0c0
0000f5 e0d2
0000f6 2744
0000f7 9349
0000f8 8348                              clear LEDCounter 
                                 
0000f9 2744                              clr temp                           
0000fa b948                              out PORTC, temp                     
0000fb b94e                              out PORTE, temp
                                         
0000fc e047                              ldi temp, inDeliver
0000fd 1644                              cp currFlag, temp
0000fe f581                              brne EndIF
                                 
0000ff ed40                              ldi temp, turnLEDOff
000100 b94e                              out PORTE, temp
                                 
000101 c02d                              rjmp EndIF
                                 
                                         skipLED:
                                 
000102 93a0 0200                         sts LEDCounter, r26
000104 93b0 0201                         sts LEDCounter +1, r27
                                 
                                 
                                 
                                     ;wyfugwbehnfc
000106 91a0 0204                         lds r26, ReturnCounter
000108 91b0 0205                         lds r27, ReturnCounter+1
00010a 9611                              adiw r27:r26, 1
                                 
00010b 3da0                              cpi r26, low(250*INTS_PER_MS)        ; 3 second check
00010c e047                              ldi temp, high(250*INTS_PER_MS) 
00010d 07b4                              cpc r27, temp
00010e f451                              brne skipOff
                                 
                                         
                                 
00010f 930f
000110 e000
000111 1690
000112 910f                              check_coins_zero
000113 f0d9                              breq EndIF 
                                 
000114 2755                              clr temp1
000115 b95e                              out PORTE, temp1
                                         
000116 949a                              dec coinsToReturn
                                 
000117 2755                              clr temp1
000118 b95e                              out PORTE, temp1
                                 
                                     skipOff:
000119 3aa0                              cpi r26, low(500*INTS_PER_MS)        ; 3 second check
00011a e04f                              ldi temp, high(500*INTS_PER_MS) 
00011b 07b4                              cpc r27, temp
00011c f471                              brne skipOn
                                         
00011d 930f
00011e e000
00011f 1690
000120 910f                              check_coins_zero
000121 f069                              breq EndIf
                                         
000122 ed50                              ldi temp1, turnMotOn
000123 b95e                              out PORTE, temp1
                                 
000124 e0c4
000125 e0d2
000126 2744
000127 9349
000128 8348                              clear ReturnCounter
000129 940c 012f                         jmp EndIF
                                 
                                         skipOn:
00012b 93a0 0204                         sts ReturnCounter, r26
00012d 93b0 0205                         sts ReturnCounter +1, r27
                                 
                                     ;counting 3 seconds until the Start screen can be cleared
                                     
                                 
                                 
                                 
                                 
                                 EndIF:
00012f 91bf                          pop r27
000130 91af                          pop r26
000131 919f                          pop r25                                 ; Epilogue starts;
000132 918f                          pop r24                                 ; Restore all conflict registers from the stack.
000133 91cf                          pop YL
000134 91df                          pop YH
000135 915f                          pop temp1
000136 914f                          pop temp
000137 bf4f                          out SREG, temp
000138 914f                          pop temp
                                 .include "modules/keypad.asm"
000139 9518                      
                                 .equ INITCOLMASK = 0xEF         ; 1110 1111 to check the rightmost column (0 for logic low & 1 for logic high)
                                 .equ INITROWMASK = 0x01         ; 0000 0001 to check the top row (1 to read input) 
                                 .equ ROWMASK = 0x0F             ; for obtaining input from port L
                                 
                                 init_loop:
00013a 935f                          push temp1
00013b b75f                          in temp1, SREG
00013c 935f                          push temp1
00013d 934f                          push temp
                                 
00013e e047                          ldi temp, inDeliver
00013f 1644                          cp currFlag, temp
000140 f409                          brne startLoop
                                 
000141 c062                          rjmp endKeypad
                                     /*ser col
                                     cp keyDebounce, col
                                     out PORTC, keyDebounce
                                     
                                     brne noDebounce
                                     rjmp endKeypad*/
                                 
                                     startLoop:
000142 ee3f                          ldi cmask, INITCOLMASK
000143 2711                          clr col 
                                     
                                 
                                 colloop:
000144 3014                          cpi col, 4                  ; if it reached the end of the columns
000145 f409                          brne cont                   
000146 c05d                          rjmp endKeypad 
                                     cont:
000147 9330 010b                     sts PORTL, cmask            ; send logic low to certain column to read by row port
                                 
000149 ef4f                          ldi temp, 0xFF   
                                 
                                 delay:  
00014a 954a                          dec temp
00014b f7f1                          brne delay                  ; delays process for 255 clocks
                                 
00014c 9140 0109                     lds temp, PINL
00014e 704f                          andi temp, ROWMASK          ; masking the higher bits (which will be set to output hence garbage)
00014f 304f                          cpi temp, 0xF               ; Check if any of the rows is low (0xF = 0000 1111)
000150 f081                          breq nextCol                ; all rows are high
                                 
000151 934f
000152 ef4f
000153 2e64
000154 914f                          set_reg keyPress, 0xFF
                                 
000155 d0f4                          rcall start_to_select
                                 
                                     /*set_reg keyDebounce, 0xFF
                                     clear keyCounter*/
                                 
                                 
                                 
                                 
                                                                 ; if any button is pressed, change (if applicable) startScreen to selectScreen
                                 
000156 e021                          ldi rmask, INITROWMASK      ;Initialize for row check
000157 2700                          clr row
                                 
                                 rowLoop:
000158 3004                          cpi row, 4                  ; goes to the end of the rows
000159 f039                          breq nextCol                ; the row scan is over
00015a 2f54                          mov temp1, temp             ; copying input from pins into temp1
00015b 2352                          and temp1, rmask            ; to only check a certain row  (if output is 00 then the Z flag is set)
00015c f041                          breq convert                ; if temp1 is zero (checks zero flag) then jump to convert
00015d 9503                          inc row
00015e 0f22                          lsl rmask                   ; to unmask the next row
00015f 940c 0158                     jmp rowLoop
                                 
                                 nextCol:
000161 0f33                          lsl cmask                   ; to unmask the next col
000162 9513                          inc col                     
000163 940c 0144                     jmp colloop                 ; in no button pressed jump back to start
                                 
                                 convert:   
000165 3013                          cpi col, 3              
000166 f0c9                          breq letters                ; if one of the letters have been pressed
000167 3003                          cpi row, 3
000168 f431                          brne isNumber               ; row != 3 & col != 3, then its a number
000169 3010                          cpi col, 0
00016a f169                          breq admin            ; row == 3 & col == 0, then the * has been pressed
00016b 3011                          cpi col, 1                  
00016c f059                          breq zero                   ; row == 3 & col == 1, then the 0 has been pressed
00016d 3012                          cpi col, 2                  
00016e f061                          breq exit                   ; row == 3 & col == 2, then the # has been pressed
                                 
                                     isNumber:                   ; else we convert the binary to an ASCII value
00016f 2f40                          mov temp, row
000170 0f44                          lsl temp                    ; multiply by 2
000171 0f40                          add temp, row               ; multiply 3
000172 0f41                          add temp, col
000173 5f4f                          subi temp, -1               ; temp now contains the actual number
000174 d027                          rcall debounce_sleep 
000175 2e74                          mov keyID, temp
                                 
000176 d1a0                          rcall updateAdminItem       ; if in Admin mode, change the current item
                                 
000177 c02c                          rjmp endKeypad
                                     
                                 
                                 zero:
000178 e15a                          ldi temp1, zeroButton
000179 2e75                          mov keyID, temp1
00017a c029                          rjmp endKeypad
                                 
                                 exit:
00017b 2466                          clr keyPress
00017c d01f                          rcall debounce_sleep 
00017d d0b9                          rcall checkCoins            
00017e d1e6                          rcall exitAdmin             ; update flags as required
00017f c024                          rjmp endKeypad
                                 
                                 letters:
000180 3000                          cpi row, 0                  ; if its an A
000181 f039                          breq aButton
000182 3001                          cpi row, 1                  ; if its a B
000183 f049                          breq bButton
000184 3002                          cpi row, 2                  ; if its a C
000185 f059                          breq cButton
000186 3003                          cpi row, 3                  ; if its a D
000187 f069                          breq dButton
000188 c01b                          rjmp endKeypad
                                     
                                 aButton:
000189 e154                          ldi temp1, aKey
00018a 2e75                          mov keyID, temp1
00018b d269                          rcall adminIncCost
00018c c017                          rjmp endKeypad
                                 
                                 bButton:
00018d e155                          ldi temp1, bKey
00018e 2e75                          mov keyID, temp1
00018f d2a6                          rcall adminDecCost
000190 c013                          rjmp endKeypad
                                 
                                 cButton:
000191 e156                          ldi temp1, cKey
000192 2e75                          mov keyID, temp1
000193 d2e3                          rcall resetNumItems
000194 c00f                          rjmp endKeypad
                                 
                                 dButton: 
000195 e157                          ldi temp1, dKey
000196 2e75                          mov keyID, temp1
000197 c00c                          rjmp endKeypad
                                 
                                 admin:
000198 2466                            clr keyPress
000199 d002                          rcall debounce_sleep      ; debounce the button
00019a d0d0                          rcall select_to_admin
00019b c008                          rjmp endKeypad
                                 
                                 
                                 debounce_sleep:
00019c 935f                          push temp1
00019d e352                          ldi temp1, 50               ; debounce for 200ms
                                     startDebounce:
00019e deca                          rcall sleep_5ms
00019f 955a                          dec temp1
0001a0 3051                          cpi temp1, 1
0001a1 f7e4                          brge startDebounce
0001a2 915f                          pop temp1
0001a3 9508                          ret
                                 
                                 
                                 endKeypad:
0001a4 e043                          ldi temp, inCoin
0001a5 1644                          cp currFlag, temp
0001a6 f429                          brne coinCountCheck
                                 
0001a7 914f                          pop temp
0001a8 915f                          pop temp1
0001a9 bf5f                          out SREG, temp1
0001aa 915f                          pop temp1
                                 
0001ab c06e                          rjmp main
                                 
                                     coinCountCheck:
0001ac e046                          ldi temp, ADCCoin
0001ad 1644                          cp currFlag, temp
0001ae f431                          brne toMain
0001af dfec                          rcall debounce_sleep
                                 
0001b0 914f                          pop temp
0001b1 915f                          pop temp1
0001b2 bf5f                          out SREG, temp1
0001b3 915f                          pop temp1
                                 
0001b4 c321                          rjmp coinCount
                                 
                                     toMain:
0001b5 914f                          pop temp
0001b6 915f                          pop temp1
0001b7 bf5f                          out SREG, temp1
0001b8 915f                          pop temp1
                                 
0001b9 c060                          rjmp main
                                 
                                 
                                 
                                 RESET: 
0001ba e251                      	ldi temp1, high(RAMEND) 		; Initialize stack pointer
0001bb bf5e                      	out SPH, temp1
0001bc ef5f                      	ldi temp1, low(RAMEND)
0001bd bf5d                      	out SPL, temp1
0001be ef50                      	ldi temp1, PORTLDIR
0001bf 9350 010a                 	sts DDRL, temp1					; sets lower bits as input and upper as output
                                 
0001c1 d61d                      	rcall InitArrays				; initializes the Cost & Inventory arrays with appropriate values
                                 
0001c2 ef5f                      	ser temp1 						; set Port C,G & D as output - reset all bits to 0 (ser = set all bits in register)
0001c3 b957                      	out DDRC, temp1 
0001c4 b95d                      	out DDRE, temp1
                                 
                                 	//	out DDRG, temp1
                                 
0001c5 ef40                          ldi temp, PORTLDIR
0001c6 9340 010a                     sts DDRL, temp            		; sets lower bits as input and upper as output
                                 
0001c8 ef0f                          ser r16
0001c9 bb00                          out DDRF, r16
0001ca b901                          out DDRA, r16
0001cb 2700                          clr r16
0001cc bb01                          out PORTF, r16
0001cd b902                          out PORTA, r16              	; setting PORTA & PORTF as output
                                 
0001ce ef4f                      	ser temp 						; set Port C as output - reset all bits to 0 (ser = set all bits in register)
0001cf b947                      	out DDRC, temp 
                                 
0001d0 2744                      	clr temp
0001d1 b94a                      	out DDRD, temp					; set PORTD (external interrupts) as input
                                 
0001d2 e043                      	ldi temp, (1 << INT0) | (1 << INT1)
0001d3 bb4d                      	out EIMSK, temp
                                 
0001d4 930f
0001d5 e308
0001d6 de68
0001d7 de77
0001d8 910f                          do_lcd_command 0b00111000 		; 2x5x7 (2 lines, 5x7 is the font)
0001d9 de8f                          rcall sleep_5ms
0001da 930f
0001db e308
0001dc de62
0001dd de71
0001de 910f                          do_lcd_command 0b00111000 		; 2x5x7
0001df de80                          rcall sleep_1ms
0001e0 930f
0001e1 e308
0001e2 de5c
0001e3 de6b
0001e4 910f                          do_lcd_command 0b00111000 		; 2x5x7
0001e5 930f
0001e6 e308
0001e7 de57
0001e8 de66
0001e9 910f                          do_lcd_command 0b00111000 		; 2x5x7
0001ea 930f
0001eb e008
0001ec de52
0001ed de61
0001ee 910f                          do_lcd_command 0b00001000 		; display off?
0001ef 930f
0001f0 e001
0001f1 de4d
0001f2 de5c
0001f3 910f                          do_lcd_command 0b00000001 		; clear display
0001f4 930f
0001f5 e006
0001f6 de48
0001f7 de57
0001f8 910f                          do_lcd_command 0b00000110 		; increment, no display shift
0001f9 930f
0001fa e00e
0001fb de43
0001fc de52
0001fd 910f                          do_lcd_command 0b00001110 		; Cursor on, bar, no blink
                                 
0001fe 934f
0001ff e041
000200 2e44
000201 914f                      	set_reg currFlag, inStart
000202 2455                      	clr oldFlag
000203 e0c2
000204 e0d2
000205 2744
000206 9349
000207 8348                      	clear DisplayCounter
                                 
000208 e040                          ldi temp, 0b00000000
000209 bd44                          out TCCR0A, temp
00020a e042                          ldi temp, 0b00000010
00020b bd45                          out TCCR0B, temp        ; Prescaling value=8
00020c e041                          ldi temp, 1<<TOIE0      ; = 128 microseconds
00020d 9340 006e                     sts TIMSK0, temp        ; T/C0 interrupt enable
                                 
00020f 2499                      	clr coinsToReturn
                                 
                                 	// REFS0: sets up voltage reference, 0b01 provides the reference with the best range
                                 	// setting ADLAR to 1 left aligns the 10 output bits within the 16 bit output register
                                 	// MUX0 to MUX5 choose the input pin/mode/gain. 0b10000 chooses PK8 on the board
                                 	// ADIE enables the ADC interrupt, which interrupts when a conversion is finished
                                 	// ADPS0 chooses the ADC clock divider. 0b111 uses a 128 divider to get a 125 kHz ADC
                                 	//      clock which is within the recommended range of 50 - 200 kHz
000210 e440                      	ldi temp, (0b01 << REFS0) | (0 << ADLAR) | (0 << MUX0)
000211 9340 007c                 	sts ADMUX, temp
                                 
000213 e048                      	ldi temp, (1 << MUX5)
000214 9340 007b                 	sts ADCSRB, temp
                                 
000216 e84f                      	ldi temp, (1 << ADEN) | (1 << ADIE) | (0b111 << ADPS0) 
000217 9340 007a                 	sts ADCSRA, temp
                                 
000219 9478                      	sei
                                 
                                 
                                 
                                 main:
00021a 1445                      	cp currFlag, oldFlag
00021b f419                      	brne update				; screen update needed 
                                 	
00021c ef4f                      	ldi temp, 0xFF
00021d 1664                      	cp keyPress, temp
00021e f4b9                      	brne end				; if key not pressed no update needed 
                                 							; else if is pressed then one of the screens might need updating
                                 	update:
00021f 2c54                      	mov oldFlag, currFlag	; update flags
                                 
000220 2d44                      	mov temp, currFlag
                                 	
000221 3041                      	cpi temp, inStart		; checking which screen to update to
000222 f409                      	brne checkAdmin
000223 d51f                      	rcall startScreen
                                 checkAdmin:
000224 3048                      	cpi temp, inAdmin		; checking which screen to update to
000225 f409                      	brne checkSelect
000226 d063                      	rcall adminScreen
                                 checkSelect:
000227 3042                      	cpi temp, inSelect
000228 f409                      	brne checkEmpty
000229 d455                      	rcall selectScreen		
                                 checkEmpty:
00022a 3044                      	cpi temp, inEmpty
00022b f409                      	brne checkCoin
00022c d3e5                      	rcall emptyScreen
                                 checkCoin:
00022d 3043                      	cpi temp, inCoin
00022e f409                      	brne checkReturn
00022f d285                      	rcall coinScreen
                                 checkReturn:
000230 3045                      	cpi temp, inReturn
000231 f409                      	brne checkDeliver
000232 d26d                      	rcall returnScreen
                                 checkDeliver:
000233 3047                      	cpi temp, inDeliver
000234 f409                      	brne end
000235 d36e                      	rcall deliverScreen
                                 	
                                 end:
000236 cf03                      	rjmp init_loop
                                 
                                 	
                                 checkCoins:
000237 934f                          push temp
000238 b74f                          in temp, SREG
000239 934f                          push temp
                                 
00023a e046                      	ldi temp, ADCCoin
00023b 1644                      	cp currFlag, temp
00023c f461                      	brne endFuntion
                                 
00023d 2744                      	clr temp
00023e 16a4                      	cp coinsEntered, temp
00023f f429                      	brne retCoin
                                 
000240 934f
000241 e042
000242 2e44
000243 914f                      	set_reg currFlag, inSelect			; no coins have been entered
000244 c041                      	rjmp endF
                                 
                                 	retCoin:							; coins have been entered
000245 934f
000246 e045
000247 2e44
000248 914f                      	set_reg currFlag, inReturn
                                 
                                 	endFuntion:
000249 c03c                      	rjmp endF	
                                 
                                 start_to_select:
00024a 934f                          push temp
00024b b74f                          in temp, SREG
00024c 934f                          push temp
                                 
00024d 2d44                          mov temp, currFlag
00024e 3041                          cpi temp, inStart              ; checking whether the start screen is open
00024f f5b1                          brne endF 
                                                                 ; not in start screen, so keep going
                                     
000250 934f
000251 e042
000252 2e44
000253 914f                          set_reg currFlag, inSelect
000254 934f
000255 2744
000256 2e64
000257 914f                      	clr_reg keyPress					; ignore this key press
000258 c02d                      	rjmp endF
                                 
                                 empty_to_select:
000259 934f                          push temp
00025a b74f                          in temp, SREG
00025b 934f                          push temp
                                 
00025c 2d44                          mov temp, currFlag
00025d 3044                          cpi temp, inEmpty              ; checking whether the empty screen is open
00025e f539                          brne endF 
                                 									; not in empty screen, so keep going
00025f 2744                      	clr temp
000260 b948                      	out PORTC, temp                     
000261 b94e                      	out PORTE, temp
                                     
000262 934f
000263 e042
000264 2e44
000265 914f                          set_reg currFlag, inSelect
000266 934f
000267 2744
000268 2e64
000269 914f                      	clr_reg keyPress					; ignore this key press
00026a c01b                      	rjmp endF
                                 
                                 select_to_admin:
00026b 934f                          push temp
00026c b74f                          in temp, SREG
00026d 934f                          push temp
                                 
00026e 2d45                          mov temp, oldFlag
00026f 3042                          cpi temp, inSelect              ; checking whether the empty screen is open
000270 f4a9                          brne endF 
                                 									; not in empty screen, so keep going    
000271 934f
000272 e048
000273 2e44
000274 914f                          set_reg currFlag, inAdmin
000275 934f
000276 2744
000277 2e64
000278 914f                      	clr_reg keyPress					; ignore this key press
000279 c00c                      	rjmp endF
                                 
                                 deliver_to_select:
00027a 934f                      	push temp
00027b b74f                          in temp, SREG
00027c 934f                      	push temp
                                 
00027d 2d44                      	mov temp, currFlag
00027e 3047                          cpi temp, inDeliver              ; checking whether the empty screen is open
00027f f431                          brne endF 
                                 
000280 934f
000281 e042
000282 2e44
000283 914f                          set_reg currFlag, inSelect
000284 e040                      	ldi temp, 0
000285 b94e                      	out PORTE, temp     ; turn off moter 
                                 
                                     endF:
000286 914f                          pop temp
000287 bf4f                          out SREG, temp
000288 914f                          pop temp
000289 9508                          ret 
                                 
                                 .include "modules/AdminScreen.asm"
                                 
                                 ; Project - Vending Machine
                                 ;	
                                 ; Admin Screen
                                 
                                 adminScreen:
00028a 934f                        push temp
00028b b74f                        in temp, SREG
00028c 934f                        push temp
00028d 935f                        push temp1
                                 
                                 
00028e ef5f                        ser temp1
00028f 1665                        cp keyPress, temp1
                                   
                                 
000290 f011                        breq notDefault
                                 
                                   defaultItem:
000291 e041                        ldi temp, 1
000292 2ed4                        mov currItem, temp
                                 
                                   notDefault:						; a key has been pressed so assume item has been changed if needed
                                 
                                   //out PORTC, currItem
                                 
000293 930f
000294 e001
000295 dda9
000296 ddb8
000297 910f                        do_lcd_command 0b00000001 		; clear display
000298 930f
000299 e006
00029a dda4
00029b ddb3
00029c 910f                        do_lcd_command 0b00000110 		; increment, no display shift
00029d 930f
00029e e00e
00029f dd9f
0002a0 ddae
0002a1 910f                        do_lcd_command 0b00001110 		; Cursor on, bar, no blink
                                 
0002a2 930f
0002a3 e401
0002a4 dda1
0002a5 dda9
0002a6 910f                        do_lcd_data_i 'A' 
0002a7 930f
0002a8 e604
0002a9 dd9c
0002aa dda4
0002ab 910f                        do_lcd_data_i 'd' 
0002ac 930f
0002ad e60d
0002ae dd97
0002af dd9f
0002b0 910f                        do_lcd_data_i 'm' 
0002b1 930f
0002b2 e609
0002b3 dd92
0002b4 dd9a
0002b5 910f                        do_lcd_data_i 'i' 
0002b6 930f
0002b7 e60e
0002b8 dd8d
0002b9 dd95
0002ba 910f                        do_lcd_data_i 'n' 
0002bb 930f
0002bc e200
0002bd dd88
0002be dd90
0002bf 910f                        do_lcd_data_i ' ' 
0002c0 930f
0002c1 e60d
0002c2 dd83
0002c3 dd8b
0002c4 910f                        do_lcd_data_i 'm' 
0002c5 930f
0002c6 e60f
0002c7 dd7e
0002c8 dd86
0002c9 910f                        do_lcd_data_i 'o' 
0002ca 930f
0002cb e604
0002cc dd79
0002cd dd81
0002ce 910f                        do_lcd_data_i 'd' 
0002cf 930f
0002d0 e605
0002d1 dd74
0002d2 dd7c
0002d3 910f                        do_lcd_data_i 'e' 
0002d4 930f
0002d5 e200
0002d6 dd6f
0002d7 dd77
0002d8 910f                        do_lcd_data_i ' '
                                 
0002d9 2d0d                        mov r16, currItem
0002da dd94                        rcall print_digits 
                                 
0002db 930f
0002dc ec00
0002dd dd61
0002de dd70
0002df 910f                        do_lcd_command 0b11000000  		; break to the next line 
                                 
0002e0 2d5d                        mov temp1, currItem
0002e1 93af
0002e2 93bf
0002e3 935f
0002e4 934f
0002e5 b74f
0002e6 934f
0002e7 e0aa
0002e8 e0b2
0002e9 3051
0002ea f021
0002eb 5051
0002ec 9611
0002ed 940c 02e9
0002ef 2700
0002f0 910c
0002f1 914f
0002f2 bf4f
0002f3 914f
0002f4 915f
0002f5 91bf
0002f6 91af                        get_element temp1, Inventory, r16
0002f7 dd77                        rcall print_digits 				; print inventory
                                 
0002f8 d029                        rcall addSpaces					; print spaces to move cost to the end of line
                                 
0002f9 2d5d                        mov temp1, currItem
0002fa 93af
0002fb 93bf
0002fc 935f
0002fd 934f
0002fe b74f
0002ff 934f
000300 e1a3
000301 e0b2
000302 3051
000303 f021
000304 5051
000305 9611
000306 940c 0302
000308 2700
000309 910c
00030a 914f
00030b bf4f
00030c 914f
00030d 915f
00030e 91bf
00030f 91af                        get_element temp1, Cost , r16
000310 dd5e                        rcall print_digits 				; print inventory
                                 
                                 
000311 2466                        clr keyPress
                                 
000312 915f                        pop temp1
000313 914f                        pop temp
000314 bf4f                        out SREG, temp
000315 914f                        pop temp
                                 
000316 9508                        ret 
                                 
                                 
                                 updateAdminItem:
000317 934f                      	push temp
000318 b74f                      	in temp, SREG
000319 934f                      	push temp
                                 
00031a e048                      	ldi temp, inAdmin
00031b 1654                      	cp oldFlag, temp
00031c f409                      	brne noUpdate
                                 
00031d 2cd7                      	mov currItem, keyID
                                 
                                 	noUpdate:
00031e 914f                        	pop temp
00031f bf4f                       	out SREG, temp
000320 914f                        	pop temp
                                 
000321 9508                        	ret
                                 
                                 addSpaces:
000322 934f                      	push temp
000323 b74f                      	in temp, SREG
000324 934f                      	push temp
                                 
000325 930f
000326 e200
000327 dd1e
000328 dd26
000329 910f                      	do_lcd_data_i ' ' 
00032a 930f
00032b e200
00032c dd19
00032d dd21
00032e 910f                      	do_lcd_data_i ' ' 
00032f 930f
000330 e200
000331 dd14
000332 dd1c
000333 910f                      	do_lcd_data_i ' ' 
000334 930f
000335 e200
000336 dd0f
000337 dd17
000338 910f                      	do_lcd_data_i ' ' 
000339 930f
00033a e200
00033b dd0a
00033c dd12
00033d 910f                      	do_lcd_data_i ' ' 
00033e 930f
00033f e200
000340 dd05
000341 dd0d
000342 910f                      	do_lcd_data_i ' ' 
000343 930f
000344 e200
000345 dd00
000346 dd08
000347 910f                      	do_lcd_data_i ' ' 
000348 930f
000349 e200
00034a dcfb
00034b dd03
00034c 910f                      	do_lcd_data_i ' ' 
00034d 930f
00034e e200
00034f dcf6
000350 dcfe
000351 910f                      	do_lcd_data_i ' ' 
000352 930f
000353 e200
000354 dcf1
000355 dcf9
000356 910f                      	do_lcd_data_i ' ' 
000357 930f
000358 e200
000359 dcec
00035a dcf4
00035b 910f                      	do_lcd_data_i ' ' 
00035c 930f
00035d e204
00035e dce7
00035f dcef
000360 910f                      	do_lcd_data_i '$'
                                 
000361 914f                        	pop temp
000362 bf4f                       	out SREG, temp
000363 914f                        	pop temp 
                                 
000364 9508                        	ret
                                 
                                 exitAdmin:
000365 934f                      	push temp
000366 b74f                      	in temp, SREG
000367 934f                      	push temp	
                                 
000368 e048                      	ldi temp, inAdmin
000369 1654                      	cp oldFlag, temp
                                 
00036a f421                      	brne noAdminExit
                                 
00036b 934f
00036c e042
00036d 2e44
00036e 914f                      	set_reg currFlag, inSelect
                                 
                                 	noAdminExit:
00036f 914f                        	pop temp
000370 bf4f                       	out SREG, temp
000371 914f                        	pop temp 
                                 
000372 9508                        	ret
                                 
                                 adminRemoveItem:
000373 934f                      	push temp
000374 b74f                      	in temp, SREG
000375 934f                      	push temp	
000376 930f                          push r16
000377 931f                          push r17
                                 
000378 e048                      	ldi temp, inAdmin
000379 1654                      	cp oldFlag, temp
00037a f599                      	brne endRemove
                                 
00037b 934f
00037c ef4f
00037d 2e64
00037e 914f                          set_reg keyPress, 0xFF					; set flag to update the screen
                                 
00037f 2d1d                          mov r17, currItem
000380 93af
000381 93bf
000382 931f
000383 934f
000384 b74f
000385 934f
000386 e0aa
000387 e0b2
000388 3011
000389 f021
00038a 5011
00038b 9611
00038c 940c 0388
00038e 2700
00038f 910c
000390 914f
000391 bf4f
000392 914f
000393 911f
000394 91bf
000395 91af                          get_element r17, Inventory, r16
                                 
000396 3000                          cpi r16, 0
000397 f0b1                          breq endRemove
                                 
000398 950a                          dec r16
000399 93af
00039a 93bf
00039b 931f
00039c 934f
00039d b74f
00039e 934f
00039f e0aa
0003a0 e0b2
0003a1 3011
0003a2 f021
0003a3 5011
0003a4 9611
0003a5 940c 03a1
0003a7 930c
0003a8 914f
0003a9 bf4f
0003aa 914f
0003ab 911f
0003ac 91bf
0003ad 91af                          set_element r17, Inventory, r16
                                 
                                     endRemove:
0003ae 911f                          pop r17
0003af 910f                          pop r16
0003b0 914f                        	pop temp
0003b1 bf4f                       	out SREG, temp
0003b2 914f                        	pop temp 
0003b3 9508                      ret
                                 
                                 adminAddItem:
0003b4 934f                      	push temp
0003b5 b74f                      	in temp, SREG
0003b6 934f                      	push temp	
0003b7 930f                          push r16
0003b8 931f                          push r17
                                 
0003b9 e048                      	ldi temp, inAdmin
0003ba 1654                      	cp oldFlag, temp
0003bb f599                      	brne endAdd
                                 
0003bc 934f
0003bd ef4f
0003be 2e64
0003bf 914f                          set_reg keyPress, 0xFF					; set flag to update the screen
                                 
0003c0 2d1d                          mov r17, currItem
0003c1 93af
0003c2 93bf
0003c3 931f
0003c4 934f
0003c5 b74f
0003c6 934f
0003c7 e0aa
0003c8 e0b2
0003c9 3011
0003ca f021
0003cb 5011
0003cc 9611
0003cd 940c 03c9
0003cf 2700
0003d0 910c
0003d1 914f
0003d2 bf4f
0003d3 914f
0003d4 911f
0003d5 91bf
0003d6 91af                          get_element r17, Inventory, r16
                                 
0003d7 300a                          cpi r16, 10
0003d8 f0b1                          breq endAdd
                                 
0003d9 9503                          inc r16
0003da 93af
0003db 93bf
0003dc 931f
0003dd 934f
0003de b74f
0003df 934f
0003e0 e0aa
0003e1 e0b2
0003e2 3011
0003e3 f021
0003e4 5011
0003e5 9611
0003e6 940c 03e2
0003e8 930c
0003e9 914f
0003ea bf4f
0003eb 914f
0003ec 911f
0003ed 91bf
0003ee 91af                          set_element r17, Inventory, r16
                                 
                                     endAdd:
0003ef 911f                          pop r17
0003f0 910f                          pop r16
0003f1 914f                        	pop temp
0003f2 bf4f                       	out SREG, temp
0003f3 914f                        	pop temp 
0003f4 9508                      ret
                                 
                                 adminIncCost:
0003f5 934f                      	push temp
0003f6 b74f                      	in temp, SREG
0003f7 934f                      	push temp	
0003f8 930f                          push r16
0003f9 931f                          push r17
                                 
0003fa e048                      	ldi temp, inAdmin
0003fb 1654                      	cp oldFlag, temp
0003fc f599                      	brne endIncCost
                                 
0003fd 934f
0003fe ef4f
0003ff 2e64
000400 914f                          set_reg keyPress, 0xFF					; set flag to update the screen
                                 
000401 2d1d                          mov r17, currItem
000402 93af
000403 93bf
000404 931f
000405 934f
000406 b74f
000407 934f
000408 e1a3
000409 e0b2
00040a 3011
00040b f021
00040c 5011
00040d 9611
00040e 940c 040a
000410 2700
000411 910c
000412 914f
000413 bf4f
000414 914f
000415 911f
000416 91bf
000417 91af                          get_element r17, Cost, r16
                                 
000418 3003                          cpi r16, 3
000419 f0b1                          breq endIncCost
                                 
00041a 9503                          inc r16
00041b 93af
00041c 93bf
00041d 931f
00041e 934f
00041f b74f
000420 934f
000421 e1a3
000422 e0b2
000423 3011
000424 f021
000425 5011
000426 9611
000427 940c 0423
000429 930c
00042a 914f
00042b bf4f
00042c 914f
00042d 911f
00042e 91bf
00042f 91af                          set_element r17, Cost, r16
                                 
                                     endIncCost:
000430 911f                          pop r17
000431 910f                          pop r16
000432 914f                        	pop temp
000433 bf4f                       	out SREG, temp
000434 914f                        	pop temp 
000435 9508                      ret
                                 
                                 adminDecCost:
000436 934f                      	push temp
000437 b74f                      	in temp, SREG
000438 934f                      	push temp	
000439 930f                          push r16
00043a 931f                          push r17
                                 
00043b e048                      	ldi temp, inAdmin
00043c 1654                      	cp oldFlag, temp
00043d f599                      	brne endDecCost
                                 
00043e 934f
00043f ef4f
000440 2e64
000441 914f                          set_reg keyPress, 0xFF					; set flag to update the screen
                                 
000442 2d1d                          mov r17, currItem
000443 93af
000444 93bf
000445 931f
000446 934f
000447 b74f
000448 934f
000449 e1a3
00044a e0b2
00044b 3011
00044c f021
00044d 5011
00044e 9611
00044f 940c 044b
000451 2700
000452 910c
000453 914f
000454 bf4f
000455 914f
000456 911f
000457 91bf
000458 91af                          get_element r17, Cost, r16
                                 
000459 3001                          cpi r16, 1
00045a f0b1                          breq endDecCost
                                 
00045b 950a                          dec r16
00045c 93af
00045d 93bf
00045e 931f
00045f 934f
000460 b74f
000461 934f
000462 e1a3
000463 e0b2
000464 3011
000465 f021
000466 5011
000467 9611
000468 940c 0464
00046a 930c
00046b 914f
00046c bf4f
00046d 914f
00046e 911f
00046f 91bf
000470 91af                          set_element r17, Cost, r16
                                 
                                     endDecCost:
000471 911f                          pop r17
000472 910f                          pop r16
000473 914f                        	pop temp
000474 bf4f                       	out SREG, temp
000475 914f                        	pop temp 
000476 9508                      ret
                                 
                                 resetNumItems:
000477 934f                      	push temp
000478 b74f                      	in temp, SREG
000479 934f                      	push temp	
00047a 930f                          push r16
00047b 931f                          push r17
                                 
00047c e048                      	ldi temp, inAdmin
00047d 1654                      	cp oldFlag, temp
00047e f4d9                      	brne endReset
                                 
00047f 934f
000480 ef4f
000481 2e64
000482 914f                          set_reg keyPress, 0xFF					; set flag to update the screen
                                 
000483 2d1d                          mov r17, currItem
000484 2700                          clr r16
000485 93af
000486 93bf
000487 931f
000488 934f
000489 b74f
00048a 934f
00048b e0aa
00048c e0b2
00048d 3011
00048e f021
00048f 5011
000490 9611
000491 940c 048d
000493 930c
000494 914f
000495 bf4f
000496 914f
000497 911f
000498 91bf
000499 91af                          set_element r17, Inventory, r16
                                 
                                     endReset:
00049a 911f                          pop r17
00049b 910f                          pop r16
00049c 914f                        	pop temp
00049d bf4f                       	out SREG, temp
00049e 914f                        	pop temp 
                                 .include "modules/CoinReturn.asm"
00049f 9508                      
                                 ; Project - Vending Machine
                                 ;	
                                 ; Coin Return 
                                 ; - returns the coin
                                 returnScreen:
0004a0 934f                        push temp
0004a1 b74f                        in temp, SREG
0004a2 934f                        push temp
                                 
0004a3 2c9a                        mov coinsToReturn, coinsEntered
                                 
0004a4 e0c4
0004a5 e0d2
0004a6 2744
0004a7 9349
0004a8 8348                        clear ReturnCounter
                                   
0004a9 ed50                        ldi temp1, turnMotOn
0004aa b95e                        out PORTE, temp1
                                 
0004ab 934f
0004ac e042
0004ad 2e44
0004ae 914f                        set_reg currFlag, inSelect
                                 
0004af 2744                        clr temp
0004b0 b948                        out PORTC, temp
                                 
0004b1 914f                        pop temp
0004b2 bf4f                        out SREG, temp
0004b3 914f                        pop temp
                                   
0004b4 9508                        ret
                                 .include "modules/CoinScreen.asm"
                                 
                                 ; Project - Vending Machine
                                 ;	
                                 ; Coin Screen
                                 ; - takes in coin
                                 
                                 
                                 /*TODO: at the end of coin count, jump to keypad to chack for "#".
                                 		If "#" not pressed then (check flag and) rcall coinCount
                                 		Else change flag and jmp to main
                                 
                                 		What happens when coins are finished?
                                 */
                                 
                                 
                                 .equ potMax = 2
                                 .equ potMin = 9
                                 
                                 .macro cpMax
                                 	push r16
                                 	ldi r16, low(0x3FD)
                                   	cp ADCLow, r16
                                 	ldi r16, high(0x3FD)
                                   	cpc ADCHigh, r16
                                 .endmacro
                                 
                                 .macro cpMin
                                 	push r16
                                 	ldi r16, 0x01				; need a threshold for lower bound
                                   	cp ADCLow, r16
                                   	clr r16
                                   	cpc ADCHigh, r16
                                   	pop r16
                                 .endmacro
                                 
                                 
                                 coinScreen:
0004b5 2d57                      	mov  temp1, keyID 
0004b6 93af
0004b7 93bf
0004b8 935f
0004b9 934f
0004ba b74f
0004bb 934f
0004bc e1a3
0004bd e0b2
0004be 3051
0004bf f021
0004c0 5051
0004c1 9611
0004c2 940c 04be
0004c4 24bb
0004c5 90bc
0004c6 914f
0004c7 bf4f
0004c8 914f
0004c9 915f
0004ca 91bf
0004cb 91af                      	get_element temp1, Cost, coinsRequired
0004cc 24aa                      	clr coinsEntered
                                 
0004cd d036                      	rcall printCoinScreen
                                 
0004ce 2488                        	clr potPos
                                 
0004cf e0c8
0004d0 e0d2
0004d1 2744
0004d2 9349
0004d3 8348                        	clear ADCCounter
0004d4 d001                        	rcall coinCount
                                 
                                 	; remember to move value outta r16 to different one else it'll be overwritten by keypad
0004d5 9508                      ret
                                 
                                 
                                 
                                   	
                                 coinCount:
                                   	; the timer constantly polls the flag so when we're in the coin screen, it'll start
                                   	; enabling the ADC reader which in turn updates temp and temp1 with the
                                   	; low and high bytes respectively
                                 
0004d6 934f
0004d7 e046
0004d8 2e44
0004d9 914f                      		set_reg currFlag, ADCCoin				; notify all functions that coins are being counted
                                  		
                                 		
0004da 930f
0004db ef0d
0004dc 1760
0004dd e003
0004de 0770                      	  	cpMax								; check if POT at max angle
0004df f4dc                      	  	brge highSet
                                 
0004e0 930f
0004e1 e001
0004e2 1760
0004e3 2700
0004e4 0770
0004e5 910f                      	  	cpMin								; check if POT at min angle	
0004e6 f008                      	  	brlo lowSet
                                 	  	
0004e7 cc52                      	  	rjmp init_loop						; POT somewhere in between
                                 
                                 	  	lowSet:
0004e8 e012                      			ldi r17, potMax
0004e9 1681                      			cp potPos, r17					
                                 
0004ea f459                      			brne noCoin						; transitioned from high to low so coin entered
                                 
0004eb 94a3                      			inc coinsEntered
0004ec d0a3                      				rcall updateLEDs
0004ed 14ab                      	 			cp coinsEntered, coinsRequired
0004ee f431                      				brne notDone
                                 
0004ef d06e                      				rcall removeItem
0004f0 934f
0004f1 e047
0004f2 2e44
0004f3 914f                      				set_reg currFlag, inDeliver			
0004f4 cd25                      				rjmp main
                                 
                                 			notDone:
0004f5 d00e                      	  		rcall printCoinScreen			; update screen	
                                 
                                 			noCoin:							; else there was no coin entered
0004f6 934f
0004f7 e049
0004f8 2e84
0004f9 914f                      			set_reg potPos, potMin			; set flag appropriately
                                 
0004fa cc3f                      	  		rjmp init_loop
                                 
                                 		highSet:
0004fb e019                      			ldi r17, potMin
0004fc 1681                      			cp potPos, r17					; if we didn't transition from low then ignore
                                 
0004fd f421                      			brne ignore
                                 			
0004fe 934f
0004ff e042
000500 2e84
000501 914f                      			set_reg potPos, potMax			; otherwise register the high angle
                                 			
                                 
                                 			ignore:
000502 cc37                      			rjmp init_loop
000503 9508                      ret
                                 
                                 
                                 printCoinScreen:
000504 930f
000505 e001
000506 db38
000507 db47
000508 910f                      	do_lcd_command 0b00000001 				; clear display
000509 930f
00050a e006
00050b db33
00050c db42
00050d 910f                      	do_lcd_command 0b00000110 				; increment, no display shift
00050e 930f
00050f e00e
000510 db2e
000511 db3d
000512 910f                      	do_lcd_command 0b00001110 				; Cursor on, bar, no blink
                                 
000513 930f
000514 e409
000515 db30
000516 db38
000517 910f                        	do_lcd_data_i 'I' 
000518 930f
000519 e60e
00051a db2b
00051b db33
00051c 910f                        	do_lcd_data_i 'n' 
00051d 930f
00051e e703
00051f db26
000520 db2e
000521 910f                      	do_lcd_data_i 's' 
000522 930f
000523 e605
000524 db21
000525 db29
000526 910f                      	do_lcd_data_i 'e' 
000527 930f
000528 e702
000529 db1c
00052a db24
00052b 910f                      	do_lcd_data_i 'r' 
00052c 930f
00052d e704
00052e db17
00052f db1f
000530 910f                      	do_lcd_data_i 't' 
000531 930f
000532 e200
000533 db12
000534 db1a
000535 910f                      	do_lcd_data_i ' ' 
000536 930f
000537 e403
000538 db0d
000539 db15
00053a 910f                      	do_lcd_data_i 'C' 
00053b 930f
00053c e60f
00053d db08
00053e db10
00053f 910f                      	do_lcd_data_i 'o' 
000540 930f
000541 e609
000542 db03
000543 db0b
000544 910f                      	do_lcd_data_i 'i' 
000545 930f
000546 e60e
000547 dafe
000548 db06
000549 910f                      	do_lcd_data_i 'n' 
00054a 930f
00054b e703
00054c daf9
00054d db01
00054e 910f                      	do_lcd_data_i 's' 
                                 
00054f 930f
000550 ec00
000551 daed
000552 dafc
000553 910f                        	do_lcd_command 0b11000000  				; break to the next line 
                                 
000554 924f                        	push currFlag
000555 934f
000556 e043
000557 2e44
000558 914f                        	set_reg currFlag, inCoin				; pause the ADC so that the temp registers won't be updated		
000559 2d0b                        	mov r16, coinsRequired	
00055a 190a                        	sub r16, coinsEntered
00055b db13                        	rcall print_digits ; row = item id 
00055c 904f                        	pop currFlag							; resume the ADC operation		
                                 
00055d 9508                        	ret
                                 
                                 removeItem:
00055e 930f                          push r16
00055f 931f                          push r17
000560 2d17                          mov r17, keyID
000561 93af
000562 93bf
000563 931f
000564 934f
000565 b74f
000566 934f
000567 e0aa
000568 e0b2
000569 3011
00056a f021
00056b 5011
00056c 9611
00056d 940c 0569
00056f 2700
000570 910c
000571 914f
000572 bf4f
000573 914f
000574 911f
000575 91bf
000576 91af                          get_element r17, Inventory, r16
000577 950a                          dec r16
000578 93af
000579 93bf
00057a 931f
00057b 934f
00057c b74f
00057d 934f
00057e e0aa
00057f e0b2
000580 3011
000581 f021
000582 5011
000583 9611
000584 940c 0580
000586 930c
000587 914f
000588 bf4f
000589 914f
00058a 911f
00058b 91bf
00058c 91af                          set_element r17, Inventory, r16
00058d 911f                          pop r17
00058e 910f                          pop r16
00058f 9508                      	ret
                                 
                                 updateLEDS:
000590 934f                      	push temp
000591 b74f                      	in temp, SREG
000592 934f                      	push temp
000593 92af                      	push coinsEntered
000594 935f                      	push temp1
000595 2411                      	clr r1
                                 
000596 e040                      	ldi temp, 0
                                 
                                 	LEDloop:
000597 141a                      	cp r1, coinsEntered
000598 f021                      	breq updateFinish
                                 
000599 0f44                      		lsl temp
00059a 9543                      		inc temp
00059b 94aa                      		dec coinsEntered
00059c cffa                      		rjmp LEDloop
                                 
                                 	updateFinish:
00059d b948                      		out PORTC, temp
                                 
00059e 915f                      	pop temp1
00059f 90af                      	pop coinsEntered
0005a0 914f                      	pop temp
0005a1 bf4f                      	out SREG, temp
0005a2 914f                      	pop temp
                                 
0005a3 9508                      	ret
                                 .include "modules/DeliverScreen.asm"
                                 
                                 ; Project - Vending Machine
                                 ;	
                                 ; Deliver Screen
                                 
                                 .include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 deliverScreen:
0005a4 934f                        push temp 
0005a5 b74f                        in temp, SREG 
0005a6 934f                        push temp 
                                 
0005a7 930f
0005a8 e001
0005a9 da95
0005aa daa4
0005ab 910f                        do_lcd_command 0b00000001 		; clear display
0005ac 930f
0005ad e006
0005ae da90
0005af da9f
0005b0 910f                        do_lcd_command 0b00000110 		; increment, no display shift
0005b1 930f
0005b2 e00e
0005b3 da8b
0005b4 da9a
0005b5 910f                        do_lcd_command 0b00001110 		; Cursor on, bar, no blink
                                 
0005b6 930f
0005b7 e404
0005b8 da8d
0005b9 da95
0005ba 910f                        do_lcd_data_i 'D' 
0005bb 930f
0005bc e605
0005bd da88
0005be da90
0005bf 910f                        do_lcd_data_i 'e' 
0005c0 930f
0005c1 e60c
0005c2 da83
0005c3 da8b
0005c4 910f                        do_lcd_data_i 'l' 
0005c5 930f
0005c6 e609
0005c7 da7e
0005c8 da86
0005c9 910f                        do_lcd_data_i 'i' 
0005ca 930f
0005cb e706
0005cc da79
0005cd da81
0005ce 910f                        do_lcd_data_i 'v' 
0005cf 930f
0005d0 e605
0005d1 da74
0005d2 da7c
0005d3 910f                        do_lcd_data_i 'e' 
0005d4 930f
0005d5 e702
0005d6 da6f
0005d7 da77
0005d8 910f                        do_lcd_data_i 'r' 
0005d9 930f
0005da e609
0005db da6a
0005dc da72
0005dd 910f                        do_lcd_data_i 'i' 
0005de 930f
0005df e60e
0005e0 da65
0005e1 da6d
0005e2 910f                        do_lcd_data_i 'n' 
0005e3 930f
0005e4 e607
0005e5 da60
0005e6 da68
0005e7 910f                        do_lcd_data_i 'g' 
0005e8 930f
0005e9 e200
0005ea da5b
0005eb da63
0005ec 910f                        do_lcd_data_i ' ' 
0005ed 930f
0005ee e409
0005ef da56
0005f0 da5e
0005f1 910f                        do_lcd_data_i 'I' 
0005f2 930f
0005f3 e704
0005f4 da51
0005f5 da59
0005f6 910f                        do_lcd_data_i 't'   
0005f7 930f
0005f8 e605
0005f9 da4c
0005fa da54
0005fb 910f                        do_lcd_data_i 'e' 
0005fc 930f
0005fd e60d
0005fe da47
0005ff da4f
000600 910f                        do_lcd_data_i 'm' 
                                  
000601 ef4f                        ldi temp, 0xFF			; turn on LEDS (need to set the top 2 LEDS as well)
000602 b948                        out PORTC, temp
000603 b94e                        out PORTE, temp
                                  
000604 e0c2
000605 e0d2
000606 2744
000607 9349
000608 8348                        clear displayCounter      ; start change display timer  
000609 e0c0
00060a e0d2
00060b 2744
00060c 9349
00060d 8348                        clear LEDCounter         ; start LED change timer 
                                  
                                 EndDeliver: 
00060e 914f                        pop temp 
00060f bf4f                        out SREG, temp 
000610 914f                        pop temp 
                                 
000611 9508                      ret
                                 
                                 
                                 .include "modules/EmptyScreen.asm"
                                 
                                 ; Project - Vending Machine
                                 ;	
                                 ; Empty Screen
                                 
                                 emptyScreen:
000612 935f                      	push temp1
000613 930f
000614 e001
000615 da29
000616 da38
000617 910f                      	do_lcd_command 0b00000001 		; clear display
000618 930f
000619 e006
00061a da24
00061b da33
00061c 910f                      	do_lcd_command 0b00000110 		; increment, no display shift
00061d 930f
00061e e00e
00061f da1f
000620 da2e
000621 910f                      	do_lcd_command 0b00001110 		; Cursor on, bar, no blink
                                 
000622 930f
000623 e40f
000624 da21
000625 da29
000626 910f                        	do_lcd_data_i 'O' 
000627 930f
000628 e705
000629 da1c
00062a da24
00062b 910f                        	do_lcd_data_i 'u' 
00062c 930f
00062d e704
00062e da17
00062f da1f
000630 910f                      	do_lcd_data_i 't' 
000631 930f
000632 e200
000633 da12
000634 da1a
000635 910f                      	do_lcd_data_i ' ' 
000636 930f
000637 e200
000638 da0d
000639 da15
00063a 910f                      	do_lcd_data_i ' ' 
00063b 930f
00063c e40f
00063d da08
00063e da10
00063f 910f                      	do_lcd_data_i 'O' 
000640 930f
000641 e606
000642 da03
000643 da0b
000644 910f                      	do_lcd_data_i 'f' 
000645 930f
000646 e200
000647 d9fe
000648 da06
000649 910f                      	do_lcd_data_i ' ' 
00064a 930f
00064b e503
00064c d9f9
00064d da01
00064e 910f                      	do_lcd_data_i 'S' 
00064f 930f
000650 e704
000651 d9f4
000652 d9fc
000653 910f                      	do_lcd_data_i 't' 
000654 930f
000655 e60f
000656 d9ef
000657 d9f7
000658 910f                      	do_lcd_data_i 'o' 
000659 930f
00065a e603
00065b d9ea
00065c d9f2
00065d 910f                      	do_lcd_data_i 'c' 
00065e 930f
00065f e60b
000660 d9e5
000661 d9ed
000662 910f                      	do_lcd_data_i 'k'   
000663 930f
000664 e200
000665 d9e0
000666 d9e8
000667 910f                      	do_lcd_data_i ' ' 
                                 
000668 930f
000669 ec00
00066a d9d4
00066b d9e3
00066c 910f                        	do_lcd_command 0b11000000  		; break to the next line   
00066d 2d07                        	mov r16, keyID
00066e da00                        	rcall 	print_digits 			; //function to print r16 
                                 
00066f ef5f                        	ldi temp1, 0xFF			; turn on LEDS (need to set the top 2 LEDS as well)
000670 b958                        	out PORTC, temp1
000671 e25f                        	ldi temp1, turnLEDOn
000672 b95e                        	out PORTE, temp1
                                 
000673 e0c2
000674 e0d2
000675 2744
000676 9349
000677 8348                        	clear displayCounter			; start change display timer 
000678 e0c0
000679 e0d2
00067a 2744
00067b 9349
00067c 8348                        	clear LEDCounter 				; start LED change timer
00067d 915f                        	pop temp1
                                 .include "modules/SelectScreen.asm"
00067e 9508                      
                                 ; Project - Vending Machine
                                 ; 
                                 ; Empty Screen
                                 
                                 selectScreen:
00067f 934f                      	push temp
000680 b74f                      	in temp, SREG
000681 934f                      	push temp
000682 935f                        push temp1
                                 
000683 930f
000684 e001
000685 d9b9
000686 d9c8
000687 910f                        do_lcd_command 0b00000001 		; clear display
000688 930f
000689 e006
00068a d9b4
00068b d9c3
00068c 910f                        do_lcd_command 0b00000110 		; increment, no display shift
00068d 930f
00068e e00e
00068f d9af
000690 d9be
000691 910f                        do_lcd_command 0b00001110 		; Cursor on, bar, no blink
                                 
000692 930f
000693 e503
000694 d9b1
000695 d9b9
000696 910f                        do_lcd_data_i 'S' 
000697 930f
000698 e605
000699 d9ac
00069a d9b4
00069b 910f                        do_lcd_data_i 'e' 
00069c 930f
00069d e60c
00069e d9a7
00069f d9af
0006a0 910f                        do_lcd_data_i 'l' 
0006a1 930f
0006a2 e605
0006a3 d9a2
0006a4 d9aa
0006a5 910f                        do_lcd_data_i 'e' 
0006a6 930f
0006a7 e603
0006a8 d99d
0006a9 d9a5
0006aa 910f                        do_lcd_data_i 'c' 
0006ab 930f
0006ac e704
0006ad d998
0006ae d9a0
0006af 910f                        do_lcd_data_i 't' 
0006b0 930f
0006b1 e200
0006b2 d993
0006b3 d99b
0006b4 910f                        do_lcd_data_i ' ' 
0006b5 930f
0006b6 e609
0006b7 d98e
0006b8 d996
0006b9 910f                        do_lcd_data_i 'i' 
0006ba 930f
0006bb e704
0006bc d989
0006bd d991
0006be 910f                        do_lcd_data_i 't' 
0006bf 930f
0006c0 e605
0006c1 d984
0006c2 d98c
0006c3 910f                        do_lcd_data_i 'e' 
0006c4 930f
0006c5 e60d
0006c6 d97f
0006c7 d987
0006c8 910f                        do_lcd_data_i 'm' 
0006c9 930f
0006ca e200
0006cb d97a
0006cc d982
0006cd 910f                        do_lcd_data_i ' ' 
0006ce 930f
0006cf e200
0006d0 d975
0006d1 d97d
0006d2 910f                        do_lcd_data_i ' '   
0006d3 930f
0006d4 e200
0006d5 d970
0006d6 d978
0006d7 910f                        do_lcd_data_i ' ' 
                                 
0006d8 2d56                        mov temp1, keyPress
0006d9 3f5f                        cpi temp1, 0xFF
0006da f531                        brne EndSelect
                                 
0006db 2466                        clr keyPress
0006dc 2d07                        mov r16, keyID
                                 
0006dd 300a                        cpi r16, 10
0006de f514                        brge EndSelect
                                 
0006df 93af
0006e0 93bf
0006e1 930f
0006e2 934f
0006e3 b74f
0006e4 934f
0006e5 e0aa
0006e6 e0b2
0006e7 3001
0006e8 f021
0006e9 5001
0006ea 9611
0006eb 940c 06e7
0006ed 2711
0006ee 911c
0006ef 914f
0006f0 bf4f
0006f1 914f
0006f2 910f
0006f3 91bf
0006f4 91af                        get_element r16, Inventory, r17
                                   
                                 
0006f5 3010                        cpi r17, 0
0006f6 f031                        breq empty 
0006f7 934f
0006f8 e043
0006f9 2e44
0006fa 914f                        set_reg currFlag, inCoin
0006fb 940c 0701                   jmp EndSelect
                                 
                                   empty:
0006fd 934f
0006fe e044
0006ff 2e44
000700 914f                          set_reg currFlag, inEmpty
                                 
                                 
                                 	EndSelect:
000701 915f                        pop temp1
000702 914f                      	pop temp
000703 bf4f                      	out SREG, temp
000704 914f                      	pop temp
000705 9508                      	ret
                                 
                                 
                                 belay:
000706 da95                        rcall debounce_sleep
000707 da94                        rcall debounce_sleep
000708 da93                        rcall debounce_sleep
000709 da92                        rcall debounce_sleep
00070a da91                        rcall debounce_sleep
00070b da90                        rcall debounce_sleep
00070c da8f                        rcall debounce_sleep
00070d da8e                        rcall debounce_sleep
00070e da8d                        rcall debounce_sleep
00070f da8c                        rcall debounce_sleep
000710 da8b                          rcall debounce_sleep
000711 da8a                        rcall debounce_sleep
000712 da89                        rcall debounce_sleep
000713 da88                        rcall debounce_sleep
000714 da87                        rcall debounce_sleep
000715 da86                        rcall debounce_sleep
000716 da85                        rcall debounce_sleep
000717 da84                        rcall debounce_sleep
000718 da83                        rcall debounce_sleep
000719 da82                        rcall debounce_sleep
00071a da81                          rcall debounce_sleep
00071b da80                        rcall debounce_sleep
00071c da7f                        rcall debounce_sleep
00071d da7e                        rcall debounce_sleep
00071e da7d                        rcall debounce_sleep
00071f da7c                        rcall debounce_sleep
000720 da7b                        rcall debounce_sleep
000721 da7a                        rcall debounce_sleep
000722 da79                        rcall debounce_sleep
000723 da78                        rcall debounce_sleep
000724 da77                          rcall debounce_sleep
000725 da76                        rcall debounce_sleep
000726 da75                        rcall debounce_sleep
000727 da74                        rcall debounce_sleep
000728 da73                        rcall debounce_sleep
000729 da72                        rcall debounce_sleep
00072a da71                        rcall debounce_sleep
00072b da70                        rcall debounce_sleep
00072c da6f                        rcall debounce_sleep
00072d da6e                        rcall debounce_sleep
00072e da6d                          rcall debounce_sleep
00072f da6c                        rcall debounce_sleep
000730 da6b                        rcall debounce_sleep
000731 da6a                        rcall debounce_sleep
000732 da69                        rcall debounce_sleep
000733 da68                        rcall debounce_sleep
000734 da67                        rcall debounce_sleep
000735 da66                        rcall debounce_sleep
000736 da65                        rcall debounce_sleep
000737 da64                        rcall debounce_sleep
000738 da63                          rcall debounce_sleep
000739 da62                        rcall debounce_sleep
00073a da61                        rcall debounce_sleep
00073b da60                        rcall debounce_sleep
00073c da5f                        rcall debounce_sleep
00073d da5e                        rcall debounce_sleep
00073e da5d                        rcall debounce_sleep
00073f da5c                        rcall debounce_sleep
000740 da5b                        rcall debounce_sleep
000741 da5a                        rcall debounce_sleep
                                 .include "modules/StartScreen.asm"
000742 9508                      
                                 ; Project - Vending Machine
                                 ;	
                                 ; Start Screen
                                 ;
                                 ; - initialises lcd / keypad / timers -> (note: maybe group them into modules we .include when needed  )
                                 ; - jmps to select screen if 3 secs pass or until any keypad input
                                 ;
                                 
                                 startScreen:
000743 930f
000744 e302
000745 d900
000746 d908
000747 910f                      	do_lcd_data_i '2'
000748 930f
000749 e301
00074a d8fb
00074b d903
00074c 910f                      	do_lcd_data_i '1'
00074d 930f
00074e e302
00074f d8f6
000750 d8fe
000751 910f                      	do_lcd_data_i '2'
000752 930f
000753 e301
000754 d8f1
000755 d8f9
000756 910f                      	do_lcd_data_i '1'
000757 930f
000758 e200
000759 d8ec
00075a d8f4
00075b 910f                      	do_lcd_data_i ' '
00075c 930f
00075d e301
00075e d8e7
00075f d8ef
000760 910f                      	do_lcd_data_i '1'
000761 930f
000762 e307
000763 d8e2
000764 d8ea
000765 910f                      	do_lcd_data_i '7'
000766 930f
000767 e703
000768 d8dd
000769 d8e5
00076a 910f                      	do_lcd_data_i 's'
00076b 930f
00076c e301
00076d d8d8
00076e d8e0
00076f 910f                      	do_lcd_data_i '1'
000770 930f
000771 e200
000772 d8d3
000773 d8db
000774 910f                      	do_lcd_data_i ' '
000775 930f
000776 e200
000777 d8ce
000778 d8d6
000779 910f                      	do_lcd_data_i ' '
00077a 930f
00077b e200
00077c d8c9
00077d d8d1
00077e 910f                      	do_lcd_data_i ' '					; not sure how many spaces needed
00077f 930f
000780 e402
000781 d8c4
000782 d8cc
000783 910f                      	do_lcd_data_i 'B'	
000784 930f
000785 e302
000786 d8bf
000787 d8c7
000788 910f                      	do_lcd_data_i '2'
                                 
000789 930f
00078a ec00
00078b d8b3
00078c d8c2
00078d 910f                      	do_lcd_command 0b11000000	; break to the next line	
00078e 930f
00078f e506
000790 d8b5
000791 d8bd
000792 910f                      	do_lcd_data_i 'V'
000793 930f
000794 e605
000795 d8b0
000796 d8b8
000797 910f                      	do_lcd_data_i 'e'
000798 930f
000799 e60e
00079a d8ab
00079b d8b3
00079c 910f                      	do_lcd_data_i 'n'
00079d 930f
00079e e604
00079f d8a6
0007a0 d8ae
0007a1 910f                      	do_lcd_data_i 'd'
0007a2 930f
0007a3 e609
0007a4 d8a1
0007a5 d8a9
0007a6 910f                      	do_lcd_data_i 'i'
0007a7 930f
0007a8 e60e
0007a9 d89c
0007aa d8a4
0007ab 910f                      	do_lcd_data_i 'n'
0007ac 930f
0007ad e607
0007ae d897
0007af d89f
0007b0 910f                      	do_lcd_data_i 'g'
0007b1 930f
0007b2 e200
0007b3 d892
0007b4 d89a
0007b5 910f                      	do_lcd_data_i ' '
0007b6 930f
0007b7 e40d
0007b8 d88d
0007b9 d895
0007ba 910f                      	do_lcd_data_i 'M'
0007bb 930f
0007bc e601
0007bd d888
0007be d890
0007bf 910f                      	do_lcd_data_i 'a'
0007c0 930f
0007c1 e603
0007c2 d883
0007c3 d88b
0007c4 910f                      	do_lcd_data_i 'c'
0007c5 930f
0007c6 e608
0007c7 d87e
0007c8 d886
0007c9 910f                      	do_lcd_data_i 'h'	
0007ca 930f
0007cb e609
0007cc d879
0007cd d881
0007ce 910f                      	do_lcd_data_i 'i'	
0007cf 930f
0007d0 e60e
0007d1 d874
0007d2 d87c
0007d3 910f                      	do_lcd_data_i 'n'
0007d4 930f
0007d5 e605
0007d6 d86f
0007d7 d877
0007d8 910f                      	do_lcd_data_i 'e'
0007d9 930f
0007da e200
0007db d86a
0007dc d872
0007dd 910f                      	do_lcd_data_i ' '
0007de 9508                      
                                 initArrays:
0007df 934f                      	push temp
0007e0 b74f                      	in temp, SREG
0007e1 934f                      	push temp
0007e2 935f                      	push temp1
                                 	
0007e3 e051                      	ldi temp1, 1
                                 
                                 	loop:
0007e4 305a                      	cpi temp1, 10
0007e5 f171                      	breq endLoop
0007e6 2f05                      	mov r16, temp1
0007e7 93af
0007e8 93bf
0007e9 935f
0007ea 934f
0007eb b74f
0007ec 934f
0007ed e0aa
0007ee e0b2
0007ef 3051
0007f0 f021
0007f1 5051
0007f2 9611
0007f3 940c 07ef
0007f5 930c
0007f6 914f
0007f7 bf4f
0007f8 914f
0007f9 915f
0007fa 91bf
0007fb 91af                      	set_element temp1 ,Inventory, r16
0007fc d01c                      	rcall odd_or_even
0007fd 93af
0007fe 93bf
0007ff 935f
000800 934f
000801 b74f
000802 934f
000803 e1a3
000804 e0b2
000805 3051
000806 f021
000807 5051
000808 9611
000809 940c 0805
00080b 930c
00080c 914f
00080d bf4f
00080e 914f
00080f 915f
000810 91bf
000811 91af                      	set_element temp1 ,Cost, r16
000812 9553                      	inc temp1
000813 cfd0                      	rjmp loop
                                 
                                 	endLoop:
000814 915f                      	pop temp1
000815 914f                      	pop temp
000816 bf4f                      	out SREG, temp
000817 914f                      	pop temp
000818 9508                      	ret
                                 
                                 
                                 odd_or_even:
000819 935f                          push temp1
00081a 934f                      	push temp
00081b b74f                          in temp, SREG
00081c 934f                      	push temp
                                     /*
                                         9 ->       1 0 0 1
                                         1 ->     & 0 0 0 1
                                                    -------
                                                    0 0 0 1
                                 
                                         14 ->      1 1 1 0
                                         1 ->     & 0 0 0 1
                                                    -------
                                                    0 0 0 0          
                                     */
                                                 
00081d 7051                          andi temp1, 1                   
00081e 3050                          cpi temp1, 0
00081f f011                          breq even
000820 3051                          cpi temp1, 1
000821 f011                          breq odd
                                 
                                     even:
000822 e002                              ldi r16, 2
000823 c001                              rjmp endOop
                                     odd: 
000824 e001                              ldi r16, 1
                                 
                                 	endOop:
000825 914f                      	pop temp
000826 bf4f                          out SREG, temp
000827 914f                      	pop temp
000828 915f                          pop temp1
000829 9508                      	ret
                                 
                                 EXT_POT:
00082a 934f                      	push temp
00082b b74f                      	in temp, SREG
00082c 934f                      	push temp
                                 
00082d 9160 0078                 	lds ADCLow, ADCL
00082f 9170 0079                     lds ADCHigh, ADCH
                                 
000831 914f                      	pop temp
000832 bf4f                      	out SREG, temp
000833 914f                      	pop temp
                                 
000834 9518                      	reti
                                 
                                 EXT_INT0:
000835 934f                      	push temp
000836 b74f                      	in temp, SREG
000837 934f                      	push temp
                                 
000838 da20                      	rcall empty_to_select					; to abort the empty screen if needed
000839 db7a                      	rcall adminAddItem						; to add an item if in Admin mode
00083a d961                      	rcall debounce_sleep
                                 
00083b 914f                      	pop temp
00083c bf4f                      	out SREG, temp
00083d 914f                      	pop temp
00083e 9518                      	reti
                                 
                                 EXT_INT1:
00083f 934f                      	push temp
000840 b74f                      	in temp, SREG
000841 934f                      	push temp
                                 
000842 da16                      	rcall empty_to_select					; to abort the empty screen if needed
000843 db2f                      	rcall adminRemoveItem					; to remove an item if in Admin mode
000844 d957                      	rcall debounce_sleep
                                 
000845 914f                      	pop temp
000846 bf4f                      	out SREG, temp
000847 914f                      	pop temp
000848 9518                      	reti


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :  17 y  :  24 z  :   0 r0 :   0 r1 :   2 r2 :   0 r3 :   0 r4 :  30 
r5 :  11 r6 :  16 r7 :  11 r8 :   5 r9 :   5 r10:  10 r11:   4 r12:   2 
r13:  10 r14:   0 r15:   0 r16: 518 r17:  77 r18:   3 r19:   3 r20: 501 
r21: 109 r22:   3 r23:   3 r24:   6 r25:   6 r26:  91 r27:  91 r28:  14 
r29:  14 r30:   0 r31:   0 
Registers used: 27 out of 35 (77.1%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   2 adiw  :  22 and   :   1 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  41 brge  :   3 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  43 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  49 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :  28 cpc   :   8 
cpi   :  59 cpse  :   0 dec   :   7 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  44 inc   :   9 jmp   :  29 ld    :   9 ldd   :   0 ldi   : 279 
lds   :  14 lpm   :   0 lsl   :   4 lsr   :   0 mov   :  59 movw  :   0 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   1 out   :  75 pop   : 333 push  : 336 rcall : 391 ret   :  31 
reti  :   5 rjmp  :  32 rol   :   0 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   6 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  32 std   :   0 sts   :  18 sub   :   3 subi  :  19 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 39 out of 116 (33.6%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001092   4142      0   4142  262144   1.6%
[.dseg] 0x000200 0x00021c      0     28     28    8192   0.3%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
